import { Button, VerticalBox, LineEdit, TabWidget, DatePickerPopup, StandardTableView } from "std-widgets.slint";

export component AppWindow inherits Window {
    height: 950px;
    width: 850px;
    title: "Verimap IRmapper";

    //properties
    in-out property<string> kml_path_text: "unmodified";
    in-out property<string> request_data_validity_status: "unknown";
    in-out property<string> request_data_validity_issue: "unprocessed";
    
    //callbacks for the main application logic
    callback kml_to_shapefile(kml_path: string);
    callback open_request_dump_folder();
    callback purge_request_dump_folder();
    callback process_request_dump_folder();
    callback purge_perimeter_geodatabase();
    callback inject_perimeter_geodatabase();
    
    // This is the header of the application
    VerticalBox {
        width: 100%;
        height: 20%;
        y: 0px;
        padding: 20px;
        
        Image {
            height: 75px;
            //y: 10px;
            source: @image-url("../resources/verimap-logo.png");
        }

        Text {
            text: "Infrared Fire Mapper v0 (\"IRmapper\")";
            //y: 110px;
            horizontal-alignment: center;
            font-family: "Arial";
            font-size: 20px;
            color: black;
        }
    }

    // This is where the tabs and other widgets will be placed
    VerticalBox { 
        width: 100%;
        height: 80%;
        y: 150px;
        padding: 20px;


        TabWidget {
            // Fire Perimeter DB tab
            Tab {
                title: "Client Request Geodatabase";
                Rectangle { 
                    //background: #6096AE; 
                    border-color: #6096AE;
                    border-width: 5px;
                }

                Button {
                    y: 25px;
                    text: "Open request-dump folder";
                    clicked => { 
                        root.open_request_dump_folder();
                    }
                }

                Button {
                    y: 75px;
                    text: "Purge request-dump folder";
                    clicked => { 
                        root.purge_request_dump_folder();
                    }
                }

                Button {
                    y: 125px;
                    text: "Process request data";
                    clicked => { 
                        root.process_request_dump_folder();
                    }
                }

                Text {
                    y: 175px;
                    text: "Request data status: " + root.request_data_validity_status;
                    font-family: "Arial";
                    font-size: 15px;
                    color: root.request_data_validity_status == "unprocessed" ? black
                    : root.request_data_validity_status == "valid" ? green
                    : root.request_data_validity_status == "invalid" ? red : black;
                }

                Text {
                    y: 200px;
                    text: "Request data issue: " + root.request_data_validity_issue;
                    font-family: "Arial";
                    font-size: 15px;
                    color: root.request_data_validity_issue == "unprocessed" ? black
                    : root.request_data_validity_issue == "passed checks" ? green : red;
                }

                Button {
                    y: 250px;
                    text: "Purge perimeter geodatabase";
                    clicked => { 
                        root.purge_perimeter_geodatabase();
                    }
                }

                Button {
                    y: 300px;
                    text: "Inject request perimeters";
                    // Only allow DB injection if the request data is valid
                    enabled: root.request_data_validity_status == "valid" ? true : false;
                    clicked => { 
                        root.inject_perimeter_geodatabase();
                    }
                }

                StandardTableView {
                    y: 350px;
                    x: 100px;
                    width: 230px;
                    height: 200px;
                    columns: [
                        { title: "Header 1" },
                        { title: "Header 2" },
                    ];
                    rows: [
                        [
                            { text: "Item 1" }, { text: "Item 2" },
                        ],
                        [
                            { text: "Item 1" }, { text: "Item 2" },
                        ],
                        [
                            { text: "Item 1" }, { text: "Item 2" },
                        ]
                    ];
                }               
            }


            // Process Scan tab
            Tab {
                title: "Process Scan";
                Rectangle { 
                    //background: #6096AE; 
                    border-color: #6096AE;
                    border-width: 5px;
                    TouchArea { }
                }

                /*
                Text {
                    text: "Airborne data location:";
                    y: 25px;
                    font-family: "Arial";
                    font-size: 15px;
                    color: black;
                }

                LineEdit {
                    placeholder-text: "Please enter path to RAW fire data folder";
                    height: 25px;
                    width: 500px;
                    y: 55px;
                }
                
                /*Image {
                    height: 125px;
                    y: 90px;
                    source: @image-url("../resources/standard-tree.png");
                } */
      
                date-picker-button := Button {
                    y: 400px;
                    text: @tr("Select delivery date");

                    clicked => {
                        date-picker.show();
                    }
                }

                date-picker := DatePickerPopup {
                    y: (root.height - self.height ) / 2;
                    close-policy: PopupClosePolicy.no-auto-close;

                    accepted(date) => {
                        date-picker.close();
                    }
                    canceled => {
                        date-picker.close();
                    }
                }

                Text {
                    text: "Deliverable date is: ";
                    y: 370px;
                    font-family: "Arial";
                    font-size: 15px;
                    color: black;
                }

                Button {
                    y: 550px;
                    height: 50px;
                    width: 200px;
                    text: "Process input data";
                    clicked => {
                    //   root.request-increase-value();
                    }
                }*/

                Text {
                    y: 100px;
                    text: "kml_path_text: " + root.kml_path_text;
                }

                LineEdit {
                    y: 25px;
                    placeholder-text: "Input KML Path";
                    text: root.kml_path_text;
                    edited => {
                        root.kml_path_text = self.text; // Update the in-out property on edit
                    }
                }

                Button {
                    text: "Process KML to SHP";
                    clicked => { 
                        kml_to_shapefile(root.kml_path_text);
                    }
                }
            }

            //config tab
            Tab {
                title: "Configs";
                Rectangle { 
                    //background: #6096AE; 
                    border-color: #6096AE;
                    border-width: 5px;
                }

                Text {
                    text: "Configuration settings will be here";
                    y: 25px;
                    font-family: "Arial";
                    font-size: 15px;
                    color: black;
                }

                Button {
                    text: "Update configs";
                    clicked => { 
                        root.open_request_dump_folder();
                    }
                }
            }
        }
    }
}